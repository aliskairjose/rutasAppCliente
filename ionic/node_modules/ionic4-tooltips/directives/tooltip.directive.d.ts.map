{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ApplicationRef, ComponentFactoryResolver, ElementRef, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { TooltipController } from '../controllers/tooltip.cotroller';\nimport { TooltipEvent } from '../models/tooltip-event.model';\nexport declare class TooltipDirective implements OnInit, AfterViewInit, OnDestroy {\n    private el;\n    private appRef;\n    private platform;\n    private cfr;\n    private tooltipCtrl;\n    private vcr;\n    private _active;\n    private _arrow;\n    private _canShow;\n    private _debouncedPromise;\n    private _navTooltip;\n    private _tooltipElement;\n    private _tooltipTimeout;\n    debounce: number;\n    desktopEvent: TooltipEvent;\n    duration: number;\n    event: TooltipEvent;\n    hideOthers: boolean;\n    leftOffset: number;\n    mobileEvent: TooltipEvent;\n    positionV: string;\n    positionH: string;\n    role: string;\n    tooltip: string;\n    tooltipHtml: string;\n    tooltipStyles: {\n        [key: string]: string;\n    };\n    topOffset: number;\n    set navTooltip(val: boolean);\n    get navTooltip(): boolean;\n    set arrow(val: boolean);\n    get arrow(): boolean;\n    set active(val: boolean);\n    get active(): boolean;\n    constructor(el: ElementRef, appRef: ApplicationRef, platform: Platform, cfr: ComponentFactoryResolver, tooltipCtrl: TooltipController, vcr: ViewContainerRef);\n    ngOnInit(): void;\n    /**\n     * Show the tooltip immediately after initiating view if set to\n     */\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Set the canShow property\n     * Ensure that tooltip is shown only if the tooltip string is not falsey\n     */\n    set canShow(show: boolean);\n    /**\n     * @return TRUE if the tooltip can be shown\n     */\n    get canShow(): boolean;\n    /**\n     * Handles the click/press event and shows a tooltip.\n     * If a tooltip already exists, it will just reset it's timer.\n     */\n    trigger(): void;\n    /**\n     * Creates a new tooltip component and adjusts it's properties to show properly.\n     */\n    showTooltip(): void;\n    onClick(): void;\n    onPress(): void;\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n    private _createTooltipComponent;\n    private _getTooltipPosition;\n    removeTooltip(): void;\n    private _resetTimer;\n}\n"]}