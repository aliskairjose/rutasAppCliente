import { EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class IonRatingComponent implements ControlValueAccessor, OnChanges {
    private cd;
    rate: number;
    readonly: boolean;
    resettable: boolean;
    size: boolean;
    hover: EventEmitter<number>;
    leave: EventEmitter<number>;
    rateChange: EventEmitter<number>;
    hoverRate: number;
    disabled: boolean;
    onChange: (_: number) => void;
    onTouched: () => void;
    constructor(cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    private update;
    onClick(rate: number): void;
    onMouseEnter(value: number): void;
    onMouseLeave(): void;
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: number) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState?(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRatingComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRatingComponent, "ion-rating", never, { "rate": "rate"; "readonly": "readonly"; "resettable": "resettable"; "size": "size"; }, { "hover": "hover"; "leave": "leave"; "rateChange": "rateChange"; }, never, never>;
}

//# sourceMappingURL=ion-rating.component.d.ts.map