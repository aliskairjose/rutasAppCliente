import { EventEmitter, Component, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, Input, Output, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { IonicModule } from '@ionic/angular';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@ionic/angular';

function IonRatingComponent_ion_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-button", 1);
    ɵngcc0.ɵɵlistener("mouseenter", function IonRatingComponent_ion_button_0_Template_ion_button_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const i_r1 = ctx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onMouseEnter(i_r1); })("click", function IonRatingComponent_ion_button_0_Template_ion_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const i_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onClick(i_r1); });
    ɵngcc0.ɵɵelement(1, "ion-icon", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("filled", i_r1 <= ctx_r0.hoverRate || !ctx_r0.hoverRate && i_r1 <= ctx_r0.rate)("readonly", ctx_r0.readonly);
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.disabled || ctx_r0.readonly);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("size", ctx_r0.size);
} }
const _c0 = function () { return [1, 2, 3, 4, 5]; };
class IonRatingComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.hover = new EventEmitter();
        this.leave = new EventEmitter();
        this.rateChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rate) {
            this.update(this.rate);
        }
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} internalChange
     * @return {?}
     */
    update(value, internalChange = true) {
        if (!(this.readonly || this.disabled || this.rate === value)) {
            this.rate = value;
            this.rateChange.emit(this.rate);
        }
        if (internalChange) {
            if (this.onChange) {
                this.onChange(this.rate);
            }
            if (this.onTouched) {
                this.onTouched();
            }
        }
    }
    /**
     * @param {?} rate
     * @return {?}
     */
    onClick(rate) {
        this.update(this.resettable && this.rate === rate ? 0 : rate);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onMouseEnter(value) {
        if (!(this.disabled || this.readonly)) {
            this.hoverRate = value;
        }
        this.hover.emit(value);
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.leave.emit(this.hoverRate);
        this.hoverRate = 0;
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.update(value, false);
        this.cd.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
IonRatingComponent.ɵfac = function IonRatingComponent_Factory(t) { return new (t || IonRatingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
IonRatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IonRatingComponent, selectors: [["ion-rating"]], hostBindings: function IonRatingComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseleave", function IonRatingComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("blur", function IonRatingComponent_blur_HostBindingHandler() { return ctx.onBlur(); });
    } }, inputs: { rate: "rate", readonly: "readonly", resettable: "resettable", size: "size" }, outputs: { hover: "hover", leave: "leave", rateChange: "rateChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(( /**
                 * @return {?}
                 */() => IonRatingComponent)),
                multi: true
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 2, consts: [["type", "button", "fill", "clear", 3, "disabled", "filled", "readonly", "mouseenter", "click", 4, "ngFor", "ngForOf"], ["type", "button", "fill", "clear", 3, "disabled", "mouseenter", "click"], ["slot", "icon-only", "name", "star", 3, "size"]], template: function IonRatingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, IonRatingComponent_ion_button_0_Template, 2, 6, "ion-button", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpureFunction0(1, _c0));
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.IonButton, ɵngcc2.IonIcon], styles: ["[_nghost-%COMP%]{--star-color:gray;--star-color-filled:orange;display:inline-block}ion-button[_ngcontent-%COMP%]{--padding-start:0;--padding-end:0;--color:var(--star-color);--color-focused:var(--star-color);--color-activated:var(--star-color)}ion-button.filled[_ngcontent-%COMP%]{--color:var(--star-color-filled);--color-focused:var(--star-color-filled);--color-activated:var(--star-color-filled)}ion-button.readonly[_ngcontent-%COMP%]{--opacity:1}"], changeDetection: 0 });
/** @nocollapse */
IonRatingComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
IonRatingComponent.propDecorators = {
    rate: [{ type: Input }],
    readonly: [{ type: Input }],
    resettable: [{ type: Input }],
    size: [{ type: Input }],
    hover: [{ type: Output }],
    leave: [{ type: Output }],
    rateChange: [{ type: Output }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', [],] }],
    onBlur: [{ type: HostListener, args: ['blur', [],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonRatingComponent, [{
        type: Component,
        args: [{
                selector: 'ion-rating',
                template: "<ion-button *ngFor=\"let i of [1, 2, 3, 4, 5]\" type=\"button\" fill=\"clear\" [disabled]=\"disabled || readonly\"\n  (mouseenter)=\"onMouseEnter(i)\" (click)=\"onClick(i)\" [class.filled]=\"i <= hoverRate || (!hoverRate && i <= rate)\"\n  [class.readonly]=\"readonly\">\n  <ion-icon slot=\"icon-only\" name=\"star\" [size]=\"size\">\n  </ion-icon>\n</ion-button>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */() => IonRatingComponent)),
                        multi: true
                    }
                ],
                styles: [":host{--star-color:gray;--star-color-filled:orange;display:inline-block}ion-button{--padding-start:0;--padding-end:0;--color:var(--star-color);--color-focused:var(--star-color);--color-activated:var(--star-color)}ion-button.filled{--color:var(--star-color-filled);--color-focused:var(--star-color-filled);--color-activated:var(--star-color-filled)}ion-button.readonly{--opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { hover: [{
            type: Output
        }], leave: [{
            type: Output
        }], rateChange: [{
            type: Output
        }], rate: [{
            type: Input
        }], 
    /**
     * @return {?}
     */
    onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave', []]
        }], 
    /**
     * @return {?}
     */
    onBlur: [{
            type: HostListener,
            args: ['blur', []]
        }], readonly: [{
            type: Input
        }], resettable: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IonicRatingModule {
}
IonicRatingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IonicRatingModule });
IonicRatingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function IonicRatingModule_Factory(t) { return new (t || IonicRatingModule)(); }, imports: [[CommonModule, FormsModule, IonicModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IonicRatingModule, { declarations: function () { return [IonRatingComponent]; }, imports: function () { return [CommonModule, FormsModule, IonicModule]; }, exports: function () { return [IonRatingComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicRatingModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, IonicModule],
                exports: [IonRatingComponent],
                declarations: [IonRatingComponent]
            }]
    }], null, null); })();

export { IonRatingComponent, IonicRatingModule };

//# sourceMappingURL=ionic-rating.js.map